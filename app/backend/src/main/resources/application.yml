spring:
  datasource:
    #    url: jdbc:postgresql://localhost:5432/multistore?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
    #    username: root
    #    password: root
    mok:
      url: jdbc:postgresql://localhost:5432/multistore?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      username: mok
      password: mok123
      driverClassName: org.postgresql.Driver
    mop:
      url: jdbc:postgresql://localhost:5432/multistore?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      username: mop
      password: mop123
      driverClassName: org.postgresql.Driver
    moz:
      url: jdbc:postgresql://localhost:5432/multistore?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      username: moz
      password: moz123
      driverClassName: org.postgresql.Driver


  jpa:
    show-sql: true
    hibernate:
      ddl-auto: validate
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  #        flushMode: COMMIT
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 588236016572-ol2h6djeb1opi79trdajhd2gnr33crh9.apps.googleusercontent.com
            clientSecret: xN895XYM3PE0yiMGOQw6tCd1
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: 414586949544756
            clientSecret: 265cb2cd590cf11c24bf8c003ac82593
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
  mail:
    host: smtp.gmail.com
    port: 587
    username: sg.spring.system@gmail.com
    password: Twxy9qHac2BwMT6
    redirect:
      server:
        uri: http://localhost:3000
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

app:
  signature:
    secret: S97ygsgvYpwy3HW2afAEeEOlh2DAZwOzyFHMsrlDGrRmC7MXyvbGI6PChQhf
  auth:
    jwt:
      secret: 926D96C90030DD58429D2751AC1BDBBC
      expiration:
        mili-sec: 3600000
    forgotPasswordToken:
      expiration:
        mili-sec: 600000

  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - http://localhost:5000/oauth2/redirect
      - https://multistore-app-frontend-yka4rjl6za-ey.a.run.app/oauth2/redirect
logging:
  level:
    ROOT: INFO
    org:
      #      springframework:
      #        orm:
      #         jpa: DEBUG
      hibernate:
        engine:
          transaction:
            internal:
              TransactionImpl: DEBUG