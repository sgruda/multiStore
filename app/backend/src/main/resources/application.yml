spring:
  datasource:
    #    url: jdbc:postgresql://localhost:5432/docker?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
    #    username: docker
    #    password: docker
    mok:
      url: ${DATASOURCE_MOK_URL}
      username: ${DATASOURCE_MOK_USERNAME}
      password: ${DATASOURCE_MOK_PASSWORD}
      driverClassName: org.postgresql.Driver
    mop:
      url: ${DATASOURCE_MOP_URL}
      username: ${DATASOURCE_MOP_USERNAME}
      password: ${DATASOURCE_MOP_PASSWORD}
      driverClassName: org.postgresql.Driver
    moz:
      url: ${DATASOURCE_MOZ_URL}
      username: ${DATASOURCE_MOZ_USERNAME}
      password: ${DATASOURCE_MOZ_PASSWORD}
      driverClassName: org.postgresql.Driver


  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${OAUTH2_GOOGLE_CLIENT_ID}
            clientSecret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: ${OAUTH2_FACEBOOK_CLIENT_ID}
            clientSecret: ${OAUTH2_FACEBOOK_CLIENT_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SEND_EMAIL_ADDRESS}
    password: ${SEND_EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

app:
  auth:
    jwt:
      secret: AUTH_JWT_SECRET
      expiration:
        mili-sec: 864000000

  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      #      - https://localhost:8181/oauth2/callback/google
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect