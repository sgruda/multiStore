# # Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

# version: '3.7'

# # Define services
# services:
#   # App backend service
#   backend:
#     # Configuration for building the docker image for the backend service
#     build:
#       context: backend # Use an image built from the specified dockerfile in the `backend` directory.
#       dockerfile: Dockerfile
#     ports:
#       - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
#     restart: always
#     depends_on: 
#       - db # This service depends on mysql. Start that first.
#     environment: # Pass environment variables to the service
#       # SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#       SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/docker?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#       SPRING_DATASOURCE_USERNAME: docker
#       SPRING_DATASOURCE_PASSWORD: docker     
#     networks: # Networks to join (Services on the same network can communicate with each other using their name)
#       - backend-network
#       - frontend-network

#   # Frontend Service 
#   app-client:
#     build:
#       context: frontend # Use an image built from the specified dockerfile in the `polling-app-client` directory.
#       dockerfile: Dockerfile
#       args:
#         REACT_APP_API_BASE_URL: http://127.0.0.1:8080/
#     # stdin_open: true # docker run -i
#     # tty: true        # docker run -t
#     ports:
#       - "9090:80" # Forward the exposed port 80 on the container to port 80 on the host machine
#     restart: always
#     depends_on:
#       - backend
#     networks:
#       - frontend-network  
#   # Database Service (Mysql)
  # db:
  #   image: postgres:12.4-alpine
  #   ports:
  #     - "5432:5432"
  #   restart: always
  #   environment:
  #     POSTGRES_USER: docker
  #     POSTGRES_PASSWORD: docker
  #     POSTGRES_DB: docker
  #   volumes:
  #     - db-data:/var/lib/postgres
  #   networks:
  #     - backend-network
  
# # Volumes
# volumes:
#   db-data:

# # Networks to be created to facilitate communication between containers
# networks:
#   backend-network:
#   frontend-network:    


# # version: '3'

# # services:
# #   web:
# #     build:
# #       context: ./backend
# #       dockerfile: Dockerfile
# #     image: backend 
# #     ports:
# #       - '8080:8080'
# # # command: java -jar /studentRegistration/app.jar
# # #    command: mvn spring-boot:run -Drun.jvmArguments="-Dserver.port=8080"

# #   client:
# #     build: 
# #       context: ./frontend
# #       dockerfile: Dockerfile
# #     image: frontend
#     # stdin_open: true # docker run -i
#     # tty: true        # docker run -t
# #     volumes:
# #       - ./frontend:/usr/src/app
# #     ports:
# #       - '3000:3000'
# #     depends_on:
# #       - web
# #     command: npm start
# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: backend # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      # SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/docker?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: docker
      SPRING_DATASOURCE_PASSWORD: docker      
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend-network
      - frontend-network

  # Frontend Service 
  app-client:
    build:
      context: frontend # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "9090:80" # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend-network

  # Database Service (Mysql)
  db:
    image: postgres:12.4-alpine
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: docker
    volumes:
      - db-data:/var/lib/postgres
    networks:
      - backend-network
  
# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend-network:
  frontend-network:    